{"ast":null,"code":"import { Server, Model } from \"miragejs\";\nexport function makeServer({\n  environment = \"development\"\n} = {}) {\n  let server = new Server({\n    environment,\n    models: {\n      task: Model\n    },\n    seeds(server) {\n      server.create(\"task\", {\n        id: 1,\n        title: \"Implement Preject Management system\",\n        schedule: \"Sep 13\",\n        status: \"Not started\"\n      });\n      server.create(\"task\", {\n        id: 2,\n        title: \"Create Index Page\",\n        schedule: \"Aug 1\",\n        status: \"In progress\"\n      });\n      server.create(\"task\", {\n        id: 3,\n        title: \"Design Page Home\",\n        schedule: \"Jul 1\",\n        status: \"Finished\"\n      });\n    },\n    routes() {\n      this.namespace = \"api\";\n      this.get(\"/tasks\", schema => {\n        return schema.tasks.all();\n      });\n      this.post(\"/new-task\", (schema, request) => {\n        let attrs = JSON.parse(request.requestBody);\n        let obj = {\n          id: schema.tasks.all().length + 1,\n          title: attrs.title,\n          schedule: attrs.schedule,\n          status: attrs.status\n        };\n        server.create(\"task\", obj);\n        return obj;\n      });\n      this.put(\"/update-task/:id\", (schema, request) => {\n        let id = request.params.id;\n        console.log(schema.tasks.find(id), request);\n        // let attrs = JSON.parse(request.requestBody);\n        // let obj = {\n        //   id: schema.tasks.all().length + 1,\n        //   title: attrs.title,\n        //   schedule: attrs.schedule,\n        //   status: attrs.status,\n        // };\n        // server.create(\"task\", obj);\n        // return obj;\n      });\n\n      this.delete(\"/delete-task/:id\", (schema, request) => {\n        let id = request.params.id;\n        return schema.tasks.find(id).destroy();\n      });\n    }\n  });\n  return server;\n}","map":{"version":3,"names":["Server","Model","makeServer","environment","server","models","task","seeds","create","id","title","schedule","status","routes","namespace","get","schema","tasks","all","post","request","attrs","JSON","parse","requestBody","obj","length","put","params","console","log","find","delete","destroy"],"sources":["/home/me/Workspace/tasks-app/src/server.js"],"sourcesContent":["import { Server, Model } from \"miragejs\";\n\nexport function makeServer({ environment = \"development\" } = {}) {\n  let server = new Server({\n    environment,\n\n    models: {\n      task: Model,\n    },\n\n    seeds(server) {\n      server.create(\"task\", {\n        id: 1,\n        title: \"Implement Preject Management system\",\n        schedule: \"Sep 13\",\n        status: \"Not started\",\n      });\n      server.create(\"task\", {\n        id: 2,\n        title: \"Create Index Page\",\n        schedule: \"Aug 1\",\n        status: \"In progress\",\n      });\n      server.create(\"task\", {\n        id: 3,\n        title: \"Design Page Home\",\n        schedule: \"Jul 1\",\n        status: \"Finished\",\n      });\n    },\n\n    routes() {\n      this.namespace = \"api\";\n\n      this.get(\"/tasks\", (schema) => {\n        return schema.tasks.all();\n      });\n\n      this.post(\"/new-task\", (schema, request) => {\n        let attrs = JSON.parse(request.requestBody);\n        let obj = {\n          id: schema.tasks.all().length + 1,\n          title: attrs.title,\n          schedule: attrs.schedule,\n          status: attrs.status,\n        };\n        server.create(\"task\", obj);\n        return obj;\n      });\n\n      this.put(\"/update-task/:id\", (schema, request) => {\n        let id = request.params.id\n        console.log(schema.tasks.find(id), request);\n        // let attrs = JSON.parse(request.requestBody);\n        // let obj = {\n        //   id: schema.tasks.all().length + 1,\n        //   title: attrs.title,\n        //   schedule: attrs.schedule,\n        //   status: attrs.status,\n        // };\n        // server.create(\"task\", obj);\n        // return obj;\n      });\n\n      this.delete(\"/delete-task/:id\", (schema, request) => {\n        let id = request.params.id;\n        return schema.tasks.find(id).destroy();\n      });\n    },\n  });\n\n  return server;\n}\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,KAAK,QAAQ,UAAU;AAExC,OAAO,SAASC,UAAUA,CAAC;EAAEC,WAAW,GAAG;AAAc,CAAC,GAAG,CAAC,CAAC,EAAE;EAC/D,IAAIC,MAAM,GAAG,IAAIJ,MAAM,CAAC;IACtBG,WAAW;IAEXE,MAAM,EAAE;MACNC,IAAI,EAAEL;IACR,CAAC;IAEDM,KAAKA,CAACH,MAAM,EAAE;MACZA,MAAM,CAACI,MAAM,CAAC,MAAM,EAAE;QACpBC,EAAE,EAAE,CAAC;QACLC,KAAK,EAAE,qCAAqC;QAC5CC,QAAQ,EAAE,QAAQ;QAClBC,MAAM,EAAE;MACV,CAAC,CAAC;MACFR,MAAM,CAACI,MAAM,CAAC,MAAM,EAAE;QACpBC,EAAE,EAAE,CAAC;QACLC,KAAK,EAAE,mBAAmB;QAC1BC,QAAQ,EAAE,OAAO;QACjBC,MAAM,EAAE;MACV,CAAC,CAAC;MACFR,MAAM,CAACI,MAAM,CAAC,MAAM,EAAE;QACpBC,EAAE,EAAE,CAAC;QACLC,KAAK,EAAE,kBAAkB;QACzBC,QAAQ,EAAE,OAAO;QACjBC,MAAM,EAAE;MACV,CAAC,CAAC;IACJ,CAAC;IAEDC,MAAMA,CAAA,EAAG;MACP,IAAI,CAACC,SAAS,GAAG,KAAK;MAEtB,IAAI,CAACC,GAAG,CAAC,QAAQ,EAAGC,MAAM,IAAK;QAC7B,OAAOA,MAAM,CAACC,KAAK,CAACC,GAAG,CAAC,CAAC;MAC3B,CAAC,CAAC;MAEF,IAAI,CAACC,IAAI,CAAC,WAAW,EAAE,CAACH,MAAM,EAAEI,OAAO,KAAK;QAC1C,IAAIC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,WAAW,CAAC;QAC3C,IAAIC,GAAG,GAAG;UACRhB,EAAE,EAAEO,MAAM,CAACC,KAAK,CAACC,GAAG,CAAC,CAAC,CAACQ,MAAM,GAAG,CAAC;UACjChB,KAAK,EAAEW,KAAK,CAACX,KAAK;UAClBC,QAAQ,EAAEU,KAAK,CAACV,QAAQ;UACxBC,MAAM,EAAES,KAAK,CAACT;QAChB,CAAC;QACDR,MAAM,CAACI,MAAM,CAAC,MAAM,EAAEiB,GAAG,CAAC;QAC1B,OAAOA,GAAG;MACZ,CAAC,CAAC;MAEF,IAAI,CAACE,GAAG,CAAC,kBAAkB,EAAE,CAACX,MAAM,EAAEI,OAAO,KAAK;QAChD,IAAIX,EAAE,GAAGW,OAAO,CAACQ,MAAM,CAACnB,EAAE;QAC1BoB,OAAO,CAACC,GAAG,CAACd,MAAM,CAACC,KAAK,CAACc,IAAI,CAACtB,EAAE,CAAC,EAAEW,OAAO,CAAC;QAC3C;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACF,CAAC,CAAC;;MAEF,IAAI,CAACY,MAAM,CAAC,kBAAkB,EAAE,CAAChB,MAAM,EAAEI,OAAO,KAAK;QACnD,IAAIX,EAAE,GAAGW,OAAO,CAACQ,MAAM,CAACnB,EAAE;QAC1B,OAAOO,MAAM,CAACC,KAAK,CAACc,IAAI,CAACtB,EAAE,CAAC,CAACwB,OAAO,CAAC,CAAC;MACxC,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EAEF,OAAO7B,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}